                                                                                                             17-04-2023
                                  FUll-FEATURED WEB APPLICATION USING FLASK
                                                                                                             05:20:32PM

************************************************************************************************************************

                                             PART-1: GETTING STARTED
* Getting Started with Flask:

  - use terminal to install flask into python.
> pip install flask

  - To if its installed correctly.
> python
> import flask
  - if this does not give any error then its installed correctly.
> exit()

************************************************************************************************************************

> set up a virtual environment (optional)
> now create a directory (e.g. Flask_Blog)
> create a new file (e.g. flaskblog.py)

************************************************************************************************************************

Basic web applications:
from flask import Flask

app = Flask(__name__)


@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"

> So what did that code do?

1. First we imported the Flask class. An instance of this class will be our WSGI application.

2. Next we create an instance of this class. The first argument is the name of the application’s module or package.
   __name__ is a convenient shortcut for this that is appropriate for most cases. This is needed so that Flask knows
   where to look for resources such as templates and static files.

3. We then use the route() decorator to tell Flask what URL should trigger our function.

4. The function returns the message we want to display in the user’s browser. The default content type is HTML,
   so HTML in the string will be rendered by the browser.

************************************************************************************************************************

> Created Two new routes to your flask application:

- The @app.route("/") decorator tells Flask to map the / or localhost URL to the home_page() function.
  @app.route("/")
  def home_page():
      return f"<h1>Home Page</h1>" \
             f"<h1>Welcome to our home page</h1>"

- When a user navigates to http://localhost:5000/about, Flask will call the home_page() function and return the string
  <h1>Home Page</h1> \ <h1>Welcome to our home page</h1> as the response.


- The @app.route("/about") decorator tells Flask to map the /about URL to the about_page() function.
  @app.route("/about")
  def about_page():
      return f"<h1>This is our about page</h1>"

- When a user navigates to http://localhost:5000/about, Flask will call the about_page() function and return the string
  <h1>This is our about page</h1> as the response.

************************************************************************************************************************

  if __name__ == "__main__":
    app.run(debug=True)

- This code block is commonly used in Flask applications to start the development server when the app.py file is run
  directly from the command line.

- The if __name__ == "__main__": statement is used to ensure that the code inside the block is only executed when the
  script is run directly, and not when it is imported as a module.

- The app.run(debug=True) method starts the Flask development server, with the debug mode enabled. The debug mode
  automatically restarts the server whenever a code change is detected, making it easy to make changes and test the
  application in a development environment.

                                       *End of PART-1: GETTING STARTED*

************************************************************************************************************************
                                                                                                             18-04-2023
                                           PART-2: TEMPLATES
                                                                                                             02:00:19PM

> How to use templates to return more complex code using html and css and how to pass variables to our web pages:

> Create a templates directory in the main flask application and create templates:
> home.html
> about.html

************************************************************************************************************************

                                            BASIC HTML PAGES
- home.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flask Blog</title>
</head>
<body>
    <h1>Home Page</h1>
</body>
</html>

************************************************************************************************************************

- about.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flask Blog</title>
</head>
<body>
    <h1>About Page</h1>
</body>
</html>

************************************************************************************************************************

- We can render templates using the flask butil-in method: render_template()
from flask import Flask, render_template
app = Flask(__name__)


@app.route("/")
@app.route("home")
def home():
    return render_template("home.html")


@app.route("/about")
def about():
    return render_template("about.html")

if __name__ == "__main__":
    app.run(debug=True)

************************************************************************************************************************

> Adding variables or dummy data to our html files

from flask import FLASK, rander_template
app = FLASK(__name__)

posts = [
    {
        "author": "Srinivas Koda",
        "title": "Blog Post 1",
        "content": "This is my First Post",
        "date": "June 30, 2023",
        "contact": "srinivaskoda@gmail.com"
    },
    {
        "author": "Naga Pavan",
        "title": "Blog Post 2"
        "content": "This is my Second Post",
        "date": "March 09, 2023",
        "contact": "nagapavan@gmail.com"
    }
]


@app.route("/")
@app.route("/home")
def home():
    return rander_template("home.html", posts=posts)


@app.route("/about")
def about():
    return rander_template("about.html",title="About")

************************************************************************************************************************

- Using Jinja2 for looping the dummy data
- home.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flask Blog</title>
</head>
<body>
    {% for post in posts %}
        <h1>{{ post.title }}</h1>
        <p>By {{ post.name }} on {{post.date}}</p>
        <p>{{ post.content }}</p>
        <p>For contact: {{ post.contact }}</p>
    {% endfor %}
</body>
</html>

************************************************************************************************************************

- Using Jinja2 for if else conditions:
- about.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    {% if title %}
        <title>Flask Blog - {{ title }}</title>
    {% else %}
         <title>Flask Blog</title>
    {% endif %}
</head>
<body>
    <h1>About Page</h1>
</body>
</html>

************************************************************************************************************************

- Using the Concept of Template Inheritance to minimize the code:
- create a new template in our templates directory called "layout.html"

                                               PARENT TEMPLATE
- layout.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    {% if title %}
        <title>Flask Blog - {{ title }}</title>
    {% else %}
         <title>Flask Blog</title>
    {% endif %}
</head>
<body>
    {% block content %}{% endblock %}
</body>
</html>

************************************************************************************************************************

                                              CHILD TEMPLATES

- home.html:

  {% extends "layout.html" %}
  {% block content %}
        {% for post in posts %}
            <h1>{{ post.title }}</h1>
            <p>By {{ post.name }} on {{post.date}}</p>
            <p>{{ post.content }}</p>
            <p>For contact: {{ post.contact }}</p>
        {% endfor %}
  {% endblock content %}


- about.html:

  {% extends "layout.html" %}
  {% block content %}
      <h1>About Page</h1>
  {% endblock content %}

- For more information checkout the main and layout.html template where more html, css, javascript and bootstrap added.

                                      *End of PART-2: TEMPLATES*

************************************************************************************************************************
                                                                                                             19-04-2023
                                       PART-2: FORMS AND VALIDATIONS
                                                                                                             10:35:30AM

- installing wt forms extension
  pip install flask-wtf
  - This extension provides a simple way to define and validate forms

- create a file in main directory as forms.py

************************************************************************************************************************

- forms.py

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, BooleanField
from wtforms.validators import DataRequired, Length, Email, equal_to


class RegisterForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField("Email", validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired()])
    confirm_password = PasswordField("Confirm Password",[DataRequired(), equal_to("password")])
    submit = SubmitField("Sign up")


class LoginFrom(FlaskForm):
    email = StringField("Email", validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired()])
    remember = BooleanField("Remember Me")
    submit = SubmitField("Login")

************************************************************************************************************************

- Added Secret Key to our flaskblog.py

from flask import Flask, render_template, url_for
from forms import RegisterForm, LoginForm
app = Flask(__name__)

app.config["SECRET_KEY"] = "1de386d816c4c0484ffa4e3dc43f21e"      # You can generate secret key using secrets module
                                                                  # import secrets
                                                                  # secrets.token_hex(16)
                                                                  # 1de386d816c4c0484ffa4e3dc43f21ea"

posts = [
    {
    "username": "Srinivas koda",
    "title": "Blog Post 1"
    "content": "This is my first post",
    "contact": "srinivaskoda@gmail.com",
    "date": "June 30, 2023"
    },
    {
    "username": "Naga Pavan"
    "title": "Blog Post 2",
    "content": "This is my second post",
    "contact": "nagapavan@gmail.com"
    "date": "June 30, 2023"

    }
]


@app.route("/")
@app.route("/home")
def home():
    return render_template("home.html", posts=posts)


@app.route("/about")
def about():
    return render_template("about.html", title="About")

- added register route and login route
@app.route("/register")
def register():
    form = RegisterForm()
    return = render_template("register.html", title="Register", form=form)

@app.route("/login")
def login():
    form = LoginForm()
    return render_template("login.html", title="Login", form=form)


if __name__ == "__main__":
    app.run(debug=True)

************************************************************************************************************************

- register.html

{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST" action="">
            {{ form.hidden_tag() }}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Join Our Community Of Thunderous Voices!</legend>
                <div class="form-group">
                    {{ form.username.label(class="form-control-label") }}
                    {{ form.username(class="form-control form-control-lg") }}
                </div>
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {{ form.email(class="form-control form-control-lg") }}
                </div>
                <div class="form-group">
                    {{ form.password.label(class="form-control-label") }}
                    {{ form.password(class="form-control form-control-lg") }}
                </div>
                <div class="form-group">
                    {{ form.confirm_password.label(class="form-control-label") }}
                    {{ form.confirm_password(class="form-control form-control-lg") }}
                </div>
            </fieldset>
            <div class="form-group">
                {{ form.submit(class="btn btn-outline-warning") }}
            </div>
        </form>
    </div>
    <div class="border-top pt-3">
        <small class="text-muted">
            Already Have an Account? <a class="ml-2" href="{{ url_for('login') }}">Sign In</a>
        </small>
    </div>
{% endblock content %}

************************************************************************************************************************
- added flash message and redirect

from flask import Flask, render_template, url_for, flash, redirect
app = Flask(__name__)

app.config["SECRET_KEY"] = "1de386d816c4c0484ffa4e3dc43f21e

posts = [
    {
    "username": "Srinivas koda",
    "title": "Blog Post 1"
    "content": "This is my first post",
    "contact": "srinivaskoda@gmail.com",
    "date": "June 30, 2023"
    },
    {
    "username": "Naga Pavan"
    "title": "Blog Post 2",
    "content": "This is my second post",
    "contact": "nagapavan@gmail.com"
    "date": "June 30, 2023"

    }
]

@app.route("/")
@app.route("/home")
def home():
    return render_template("home.html", title="Home", posts=posts)

@app.route("/about")
def about("/about"):
    return render_template("about.html", title="About")


- added flash message and redirect to home page
app.route("/register")
def register():
    form = RegisterForm()
    if form.validation_is_submit():
        flash(f"Welcome to Thunber! {form.username.data} We're thrilled to have you join us!", "success")
        return redirect(url_for("/home"))

@app.route("/login")
def login():
    return redirect_template("login.html", title="login")

if __name__ = "__main__":
    app.run(debug=True)

************************************************************************************************************************

- adding flash message to layout template so that it can display to the user next after successfully logged in.

{% with message = get_flashed_messages(with_categories=true) %}
    {% if message %}
        {% for category, message in message %}
            <div class="alert alert-{{category}}>
                {{ message }}
            </div>
        {% endfor%}
    {% endif %}
{% endwith%}

- add this above to the {% block content %} in the layout.

************************************************************************************************************************

- giving error message feedback to the user if they enter wrong data
 <div class="form-group">
{{ form.username.label(class="form-control-label") }}
{% if form.username.errors %}
    {{ form.username(class="form-control form-control-lg is-invalid") }}
    <div class="invalid-feedback">
        {% for error in form.username.errors%}
        <span>{{ error }}</span>
        {% endfor %}
    </div>
{% else %}
    {{ form.username(class="form-control form-control-lg") }}
{% endif%}
</div>

-this goes same to all the forms like login(email, password) and register(username, email, password, confirm_password) pages.

------------------------------------------------------------------------------------------------------------------------

- login template
{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST" action="">
            {{ form.hidden_tag() }}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Login!</legend>
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.email.errors%}
                            <span>{{ error }}</span>
                            {% endfor %}
                        </div>passwordconfirm_password
                    {% else %}
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif%}
                </div>
                <div class="form-group">
                    {{ form.password.label(class="form-control-label") }}
                    {% if form.password.errors %}
                        {{ form.password(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.password.errors%}
                            <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.password(class="form-control form-control-lg") }}
                    {% endif%}
                </div>
                <div class="form-check">
                    {{ form.remember(class="form-check-input") }}
                    {{ form.remember.label(class="form-check-label") }}
                </div>
            </fieldset>
            <div class="form-group">
                {{ form.submit(class="btn border rounded btn-outline-warning") }}
            </div>
            <small class="text-mute ml-2">
                <a href="#">Forgot Password?</a>
            </small>
        </form>
    </div>
    <div class="border-top pt-3">
        <small class="text-muted">
            Need an Account? <a class="ml-2" href="{{ url_for('register') }}">Sign Up Now</a>
        </small>
    </div>
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------
- checking fake login

@app.route("/login")
def login():
    form = LoginForm()
    if form.validation_is_submit():
        if form.email.data == "nagapavan@gmail.com" and form.password.data == "password":
            flash(f"Welcome to Thunder!", "success")
            return redirect(url_for("/home"))
        else:
            flash(f"Thunder strikes! Login Unsuccessful. Please check Email and Password")
    return render_template("login.html", title="Login", form=form)

------------------------------------------------------------------------------------------------------------------------

                                       *End of PART-3: FORMS AND VALIDATIONS*

************************************************************************************************************************
                                                                                                             21-04-2023
                                       PART-4: DATABASE WITH FLASK-SQLAlchemy
                                                                                                             09:35:30AM
------------------------------------------------------------------------------------------------------------------------

- installing SQLAlchemy
> pip install flask-sqlalchemy

------------------------------------------------------------------------------------------------------------------------
from flask import Flask, render_template, flash, redirect
from form import RegisterForm, LoginForm
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)

app.config["SECRET_KEY"] = "1de386d816c4c0484ffa4e3dc43f21ea"
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite///site.db"

db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), db.unique=True, db.nullable=False)
    email = db.Column(db.String(120), db.unique=True, db.nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default="default.jpg")
    password = db.Column(db.String(20), db.nullable=False)
    posts = db.relationship("Post", backref="author", lazy=True)


    def __repr__(self):
        return f"User('{self.username}', '{self.email}', '{self.image_file}')"


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)  # it will automatically set the table
                                                                                 name into lower so User to user and
                                                                                 Post to post

    def __repr__(self):
        return f"Post('{self.title}', '{self.date_posted}')"

------------------------------------------------------------------------------------------------------------------------

- now we can use these models User and Post to create database.

> first you need to check if your in our project directory or not is not change it or else it won't work
- command line

>>> python
>>> from flaskblog import db    # flaskblog is my application and db is the instance of the database i created.
>>> db.create_all()

- This may not work, i got stuck here. Thankfully i got yhe solution from someone in the comments named daniel <3

- As of version SQLAlchemy 3.0 to create your db file you will need to run some commands like this in the shell :

>>> from project import app, db
>>> app.app_context().push()
>>> db.create_all()

- Then the .db file is created in a folder called "Instance" in your project.

------------------------------------------------------------------------------------------------------------------------

- adding User and Post to our database.

>>> from flaskblog import User, Post
>>> user_1 = User(username="srinivas", email="srinivas@gmail.com", password="sunrisers")
>>> user_2 = User(username= "pavan", email="pavan@gmail.com", password="password")

- we didn't specify any id or an image file, since is our primary key it will assign a unique id, and we set a default
  image file if we won't specify that it will take the "default.jpg".

- now we can add the user_1, user_2 to our database.

>>> db.session.add(user_1)
>>> db.session.add(user_2)

- now we can commit the changes all at once

>>> db.session.commit()
- now we committed they should have to be in the database.
- now we can perform some common query

>>> User.query.all()
[User("srinivas", "srinivas@gmail.com", "default.jpg"), User("pavan", "pavan@gmail.com","default.jpg")]

>>> User.query.first()
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> User.query.filter_by(username="srinivas").all()
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> User.query.filter_by(username="srinivas").first()
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> user = User.query.filter_by(username="srinivas").first()
>>> user
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> user.id
1
>>> user = User.query.get(1)
>>> user
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> user.posts
[]
>>>user.id
1
>>> post_1 = Post(title="Blog 1", content="First Post Content!", user_id=user.id)
>>> post_2 = Post(title="Blog 2", content="Second Post Content!", user_id=user.id)

>>> db.session.add(post_1)
>>> db.session.add(post_2)
>>> db.commit()

>>>user.posts
[Post('Blog1', '2023-04-21 12:49:06.421641'), Post('Blog2', '2023-04-21 12:49:06.421641')]
>>> for post in posts:
        print(post.title)

Blog 1
Blog 2

>>> post = Post.query.first()
>>>post

Post('Blog1', '2023-04-21 12:49:06.421641')
>>> post.user_id
1
>>> post.author
>>> User('srinu', 'srinivas@gmail.com', 'default.jpg')

>>> db.drop_all()
>>> db.create_all()
>>> User.query.all()
[]
>>> Post.query.all()
[]

------------------------------------------------------------------------------------------------------------------------

                                       *End of PART-4: DATABASE with SQLAlchemy*

************************************************************************************************************************
                                                                                                             22-04-2023
                                              PART-5: PACKAGE STRUCTURE
                                                                                                             09:00:40AM
------------------------------------------------------------------------------------------------------------------------




